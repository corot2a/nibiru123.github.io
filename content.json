[{"title":"Hexo相关配置","date":"2019-04-27T12:58:20.000Z","path":"2019/04/27/hexo1/","text":"评论系统hexo的评论系统有很多，但目前来说最好用的其实就属 Valine 了，我目前就是用的这个，配置也比较简单 Valine注册Leancloud我们的评论系统是放在 leancloud 上的，因此首先要注册一个账号:点我注册Leancloud 注册完以后需要创建一个应用，名字随便起，然后 进入应用-&gt;设置-&gt;应用key,获取你的appid和appkey， 然后在主题的配置文件中，填入你的appid和appkey,下面是我的配置文件12345678910valine: enable: true # 如果你想使用valine，请将值设置为 true appId: # your leancloud appId appKey: # your leancloud appKey notify: false # Mail notify verify: false # Verify code avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide placeholder: # Comment Box placeholder guest_info: nick,mail,link # Comment header info pageSize: 10 # comment list page size 依赖安装Json-content用于生成静态站点数据，用作站内搜索的数据源。这样你博客的搜索功能就可以使用了1cnpm install hexo-generator-json-content --save 开启标签页命令：1hexo new page tags 修改 hexo/source/tags/index.md 的元数据,参考如下 1234567---title: tagsdate: 2019-04-27 19:12:12type: &quot;tags&quot;comments: falselayout: &quot;tags&quot;--- 开启分类页命令：1hexo new page categories 同样 修改 hexo/source/categories/index.md 的元数据，参考如下 1234567---title: categoriesdate: 2019-04-27 19:09:13type: &quot;categories&quot;layout: &quot;categories&quot;comments: false--- 然后在所写的文章头部加上 categories tags 标签，参考如下：12345678910---title: title123date: 2019-03-23 categories: - c1- c2tags:- t1- t2---","categories":[{"name":"教程","slug":"教程","permalink":"https://nibiru123.github.io/categories/教程/"}],"tags":[{"name":"博客配置","slug":"博客配置","permalink":"https://nibiru123.github.io/tags/博客配置/"},{"name":"hexo","slug":"hexo","permalink":"https://nibiru123.github.io/tags/hexo/"}]},{"title":"Hibernate学习笔记（2）","date":"2019-04-27T07:28:20.000Z","path":"2019/04/27/study02/","text":"前言坚持就是胜利，今天来写一下Hibernate中实体类的编写原则，主键生成策略，增删改查的一些操作还有Hibernate缓存，还有一些乱七八糟的东西 实体类编写原则1.实体类里面的属性必须为私有的 2.私有属性要使用public公开的set和get方法 3.实体属性建议使用基本属性类型对应的包装类 包装类： 两个特殊的：int-Integer char-Character其他的都是首字母大写，如：double-Double 至于为什么使用包装类，包装类是为了避免产生歧义，double=0 和 Double=null 的意义是不一样的，比如你的考试成绩，int =0为表示零分，你没去考试不也是零分吗？但这里我们用 Integer=null来表示。这样就不会产生歧义 主键生成策略 主键生成策略常用的有 native和uuid。1234&lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot;&gt; &lt;generator class=&quot;native&quot;/&gt; &lt;generator class=&quot;uuid&quot;/&gt; &lt;/id&gt; 二者有什么区别呢？先来看图 native：为id自动生成策略，生成的是数字id，在实体类id的属性必须为int类型uuid：生成的为16进制的uuid主键，添加到数据库中不需要设置id的值，在实体类中id的属性必须为字符串string类型 PS：我在测试uuid的时候遇到输入中文就报错的情况，原因是在数据库的表中设置的编码格式不正确，所以如果你其他没有错误，但是就是运行不了，那一定要检查一下你表中字段的编码格式，设置成utf8mb4基本就解决了 对实体类的操作添加操作调用session里面的sava方法来实现12345Customer customer=new Customer();customer.setCust_name(&quot;小溪&quot;);customer.setCust_source(&quot;网络&quot;);customer.setCust_level(&quot;vip&quot;);session.save(customer); 我们来看控制台输出的语句： save方法实现了sql中insert语句 查询操作调用session里面的get方法来实现 1Customer customer = session.get(Customer.class,1); ger这里需要两个参数，第一个：实体类.class 第二个：id的值控制台输出 get方法实现了select查询语句 ps：这里我又遇到了一个坑，之前实体类定义id的时候使用了Long类型，这就导致在查询id的时候出现格式不匹配的错误，最后我把Long改成了int就解决了。 修改操作先查询再修改 123Customer customer = session.get(Customer.class,1); customer.setCust_name(&quot;大溪&quot;); session.update(customer); 我们来看控制台输出语句： 在这里，通过session.get方法来获取到了id的值，然后调用实体类中的set方法来对值进行修改，最后调用session的update的方法来实现对数据库表中内容的修改执行过程：到Customer对象里面找到cust_id的值，根据id的值进行修改 删除操作先查询再删除 12Customer customer = session.get(Customer.class,1);session.delete(customer); 这里执行方法和上面的修改操作方法类似我们看控制台输出 Hibernate的持久化对象的三种状态瞬时态瞬时态由new命令创建，开辟内存空间的对象，没有持久化表示OID（可以理解为主键），未与Session对象关联，可以表现为以下形式 1234Customer customer=new Customer(); customer.setCust_name(&quot;小溪&quot;); customer.setCust_source(&quot;网络&quot;); customer.setCust_level(&quot;vip&quot;); 持久态持久态有了OID，加入到了Session的缓存中，并且关联的session没有关闭，在数据库中有对应的记录，持久态对象是在事务没有提交之前变成持久态的1Customer customer = session.get(Customer.class,1); 脱管态同样存在OID，可以理解为离线了，当持久态与session的关联被关闭了就成为了脱管态，但是仍然与数据库的数据存在关联，只是失去了与当前Session的关联 12Customer customer=new Customer(); customer.setCust_id(&quot;2&quot;); 对saveorUpdate方法的理解在session的众多方法中，存在一个saveorUpdate方法，从字面意思来看，这是两个方法，添加或者修改，那么什么时候是修改呢，什么时候是添加呢？这和上面三种状态有啥关系呢？瞬时态下调用：12345Customer customer=new Customer(); customer.setCust_name(&quot;小溪&quot;); customer.setCust_source(&quot;网络&quot;); customer.setCust_level(&quot;vip&quot;); session.saveOrUpdate(customer); 控制台输出 很明显，这里调用了添加操作，我们可以总结，实体类对象的状态是瞬时态时，做添加持久态下调用：123Customer customer = session.get(Customer.class,2); customer.setCust_name(&quot;大溪&quot;); session.saveOrUpdate(customer); 这里调用了修改操作。so，实体类对象的状态是持久态时，做修改脱管态下调用：123456ustomer customer=new Customer(); customer.setCust_id(3); customer.setCust_name(&quot;小小溪&quot;); customer.setCust_source(&quot;网络&quot;); customer.setCust_level(&quot;vip&quot;); session.saveOrUpdate(customer); 我们可以看到，这里调用了修改方法，所以实体类对象是托管态时，做修改 Hibernate的缓存什么是缓存呢？缓存就是把数据放到内存中，不用流的方式，直接在内存中读取数据，把数据放到了内存中，提高了读取效率。Hibernate缓存Hibernate有一级二级缓存，二级缓存目前已经被redis来代替了，这里不再讨论，Hibernate的缓存减少了访问数据库的次数 一级缓存一级缓存默认是打开的，它的使用范围实际上是session的使用范围，从session的创建到session关闭，一级缓存中存储的是持久态数据 一级缓存的验证1234Customer customer1 = session.get(Customer.class,3);System.out.println(customer1);Customer customer2 = session.get(Customer.class,3);System.out.println(customer2); 在这里我们创建两个对象，根据id来查询，看是否会返回sql语句，现在我们来看控制台输出 可以看到，第一步执行完以后，发送sql语句查询，第二步则没有执行sql语句，直接访问了一级缓存的内容 一级缓存的执行过程首先查询一级缓存，发现一级缓存没有数据，才会去查询数据库的内容，随后返回一个持久化对象（customer1）其次把customer1放到一级缓存中customer2开始运行，和cus1一样，先查询一级缓存，发现一级缓存有数据，则查询一级缓存中的数据，不再执行sql语句了 一级缓存的作用1234567Customer customer1 = session.get(Customer.class,3); System.out.println(customer1); customer1.setCust_name(&quot;大小溪&quot;); //提交事务 tx.commit(); //释放资源 session.close(); 我们可以看到，这里实现了更新数据库的操作。 执行过程首先执行session的get操作，返回customer的持久态对象，放到了一级缓存中，同时在一级缓存中有个快照区，快照区保存的内容与一级缓存中的内容一致，调用set方法来修改值，也就是customer持久态对象在一级缓存中的值，修改一级缓存但不会修改快照区的内容，最后提交事务的时候，commit来比较，一级缓存中的值和快照中的值是否相同，如果相同不进行修改，如果不同，就修改咯，然后把一级缓存中的值放到数据库中。 Hibernate事务什么是事务？简单理解为就是同一组操作，要么一起成功，要么一起失败，只要其中一项操作出现了错误，就不能成功，这就和代码运行一样，其中一行代码出现了错误，其他后面就编译不通过，无法运行。事务的四个特性（ACID） 在昨天的笔记中，我有提到一个回滚方法，rollback，这个操作就是当事务出现异常时，对事务进行回滚撤销。 Hibernate事务代码的规范写法12345678try&#123; 开启事务 提交事务&#125;catch&#123; 回滚事务&#125;finally&#123; 关闭&#125; 代码事例123456789101112131415161718192021public static void demo01() &#123; Configuration cfg = new Configuration().configure(); SessionFactory sessionFactory = null; Session session = null; Transaction tx = null; try &#123; sessionFactory = cfg.buildSessionFactory(); session = sessionFactory.openSession(); tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(&quot;小溪&quot;); customer.setCust_source(&quot;网络&quot;); session.save(customer); tx.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); tx.rollback(); &#125; finally &#123; session.close(); sessionFactory.close(); &#125; Hibernate其他APIQuery使用Query不需要编学sql语句，需要写hql语句，sql的语句是操作数据库的表和字段，hql语句是操作实体类和属性，查询所有的hql语句为 from+实体类名称，代码演示如下：12345678//创建Query对象，方法里面写hql语句 Query query=session.createQuery(&quot;from Customer &quot;); //调用query里的方法来得到结果，然后用for循环输出 List&lt;Customer&gt; list=query.list(); for (Customer customer:list) &#123; System.out.println(customer); &#125; Criteria使用这个对象查询操作，不需要写语句，直接调用方法实现123456Criteria criteria=session.createCriteria(Customer.class); List&lt;Customer&gt; list=criteria.list(); for (Customer customer:list) &#123; System.out.println(customer); &#125; SQLQuery调用底层的sql实现，需要写sql语句,不建议使用，太麻烦了orz。 总结第二次的学习完成，最大的感受就是有了框架来操作数据库是真的容易！继续努力！！！","categories":[{"name":"Hibernate","slug":"Hibernate","permalink":"https://nibiru123.github.io/categories/Hibernate/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nibiru123.github.io/tags/学习笔记/"},{"name":"Java框架","slug":"Java框架","permalink":"https://nibiru123.github.io/tags/Java框架/"},{"name":"SSH","slug":"SSH","permalink":"https://nibiru123.github.io/tags/SSH/"}]},{"title":"Hibernate学习笔记（1）","date":"2019-04-26T12:30:20.000Z","path":"2019/04/26/study1/","text":"前言：说实话，建这博客的目的就是为了记录自己的学习和生活，然并卵。。。。我好像忘了它的存在，一直在我github上挂着，下午抽出来时间搞了一下博客中的评价系统，我也不知道到底能不能用- -，而且其他一些功能我还没有研究透，慢慢来咯~ 最近在学习SSH框架，其中Struts2已经学完了，但是学的不怎么样，估计还要再重新学一遍- -。等把hibernate搞完在写Struts2的学习笔记吧。（刚开始学，内容难免有不准确的地方，等到学完回头来看看再修改啦！） JAVA EE开发的结构：1234web层，业务层，持久层是EE开发中经典的三层结构web层：servlet+jsp，Struts1，2，Spring mvc业务层：Javabean，spring持久层：JDBC，hibernate，mybatis Hibernate简介Hibernate处于ee开发结构的持久层（DAO层），他使用ORM思想对数据库进行crud（增删改查）操作。那么什么是ORM呢？ orm就是对象关系映射，什么是对象关系映射呢？我个人的理解就是让实体类，也就是Javabean中的内容，与数据库中的内容进行一一对应，让实体类与数据库中的表对应，实体类里面的内容与数据库中的内容对应，这样，我们在操作数据库中内容的时候，就不用直接操作数据库中的表了，直接操作实体类中的对象、而这对应的过程是使用配置文件来完成的。 Hibernate环境搭建过程我是用Intellij IDE来学习Hibernate的，其实老师上课一直在用myeclipise，各种导包，导入约束，我觉得这种过程只需要做一次自己知道的大概就行了，不用每次都在这地方浪费时间，intellij ide的好处就是可以自动导包，比myeclipise简化多了，时间也节省了- -这里我就不多说了 没有对比就没有伤害，如下图： Hibernate优势1.Hibernate对jdbc访问数据库的代码进行了封装，终于可以不用写繁琐的重复性的sql代码了- -2.不知道了 学习过程开头已经说了，我们首先要有一个实体类（JavaBean）这里我没有在数据库中先创建表，因为Hibernate框架会根据后面的配置文件自动在数据库中创建表 1.先来看实体类：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//实体类，要与数据库表中名称一一对应/*这些属性通过getter和setter方法来访问，对外部隐藏了内部是实现细节*/public class Customer &#123; private Long cust_id; private String cust_name; private String cust_source; private String cust_industry; private String cust_level; private String cust_phone; private String cust_mobile; public Long getCust_id() &#123; return cust_id; &#125; public void setCust_id(Long cust_id) &#123; this.cust_id = cust_id; &#125; public String getCust_name() &#123; return cust_name; &#125; public void setCust_name(String cust_name) &#123; this.cust_name = cust_name; &#125; public String getCust_source() &#123; return cust_source; &#125; public void setCust_source(String cust_source) &#123; this.cust_source = cust_source; &#125; public String getCust_industry() &#123; return cust_industry; &#125; public void setCust_industry(String cust_industry) &#123; this.cust_industry = cust_industry; &#125; public String getCust_level() &#123; return cust_level; &#125; public void setCust_level(String cust_level) &#123; this.cust_level = cust_level; &#125; public String getCust_phone() &#123; return cust_phone; &#125; public void setCust_phone(String cust_phone) &#123; this.cust_phone = cust_phone; &#125; public String getCust_mobile() &#123; return cust_mobile; &#125; public void setCust_mobile(String cust_mobile) &#123; this.cust_mobile = cust_mobile; &#125;&#125; 2.实体类创建完毕，接下来我们要创建配置文件，让它与数据库中的表进行对应在实体类所在的包中，创建一个名称为 实体类名称+hbm.xml的映射文件，在这个映射文件中，定义了实体类中的属性是如何映射到数据库中的表的，在这里我的映射文件名称为：Custome+hbm.xml 123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot; &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping&gt; &lt;class name=&quot;cn.lcx.domain.Customer&quot; table=&quot;cst_customer&quot;&gt; &lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot;&gt; &lt;generator class=&quot;native&quot;/&gt; &lt;/id&gt; &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot;/&gt; &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot;/&gt; &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;/&gt; &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;/&gt; &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;/&gt; &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;/&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 我来对上面的表进行一些说明： class标签是用来建立实体类和数据库表中的映射的 name：实体类的路径，这个不用多解释，你总要告诉是哪个实体类吧，注意名称必须是全路径 table：看名字就知道是数据库的表了，也就是实体类所对应的那个表，这里表的名称为cst_customer，数据库还没有指定，在后面的会说到 catalog：这个属性就是指定数据库了，可以省略，这里我没有写，因为后面的配置文件会指定- id标签是用来指定类中的属性和表中的主键相对应，说白了就是建立主键的，什么是主键- -这个我就不多说了，主键是唯一的。 name:这个是指类中的属性名 column：这个是指表中的名，如果实体类中的名字和表中的名字相同可以省略，不过我没测试，我觉得还是不要省略吧，便与检查 length：字段的长度啦，除非有特殊的，这个默认就好 type：类型啦，对应sql的类型，没什么多说点 &lt; generator class=“native”/&gt; 这个是主键生成策略，native为自动增长，就是123456这样增长下去，后面肯定还有不同的增长策略，我还没有学习到- -。等再补充 property标签，就是建立类中的普通属性与数据库表中的标签相对应，这个很好理解 Hibernate核心配置文件以上的内容是实体类与数据库中的表来建立映射关系，我上面有说，我们还没有指定是哪个数据库，这里就是来配置数据库连接的，首先来看代码12345678910111213141516171819202122232425262728293031&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC &quot;-//Hibernate/Hibernate Configuration DTD//EN&quot; &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;!--连接数据库的基本参数--&gt; &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/hibernate_day01?useUnicode=true&amp;amp;characterEncoding=UTF8&lt;/property&gt; &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt; &lt;property name=&quot;hibernate.connection.password&quot;&gt;abc3770166&lt;/property&gt; &lt;!--hibernate属性--&gt; &lt;!-- DB schema will be updated if needed --&gt; &lt;!--根据配置生成sql语句--&gt; &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt; &lt;!--在控制台显示sql语句--&gt; &lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt; &lt;!--格式化sql语句--&gt; &lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt; &lt;!--hbm2ddl属性说明--&gt; &lt;!--hbm2ddl.auto的取值--&gt; &lt;!--none 不自动生成表--&gt; &lt;!--create 每次都会创建一个新的表--&gt; &lt;!--create-drop每次都会创建一新的表，然后程序结束后删除这个表--&gt; &lt;!--update 如果数据库中有这个表，则使用，没有，则创建一个表--&gt; &lt;!--validate 只会使用原有的表，可以用来检测映射关系--&gt; &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt; &lt;!--加载映射关系--&gt; &lt;mapping resource=&quot;cn/lcx/domain/Customer.hbm.xml&quot;&gt;&lt;/mapping&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; 在src下创建一个名称为hibernate.cfg.xml的文件，这里我就不用创建啦，因为智能的intellij ide已经帮我创建好啦，eclipse下要手动创建的，所以强烈安利使用 intellij ide，可以节省不少时间呢！ 上面这个配置文件设置了数据库的相关属性和其他一些常用的数据，通过mapping的resource属性将对象的关系加入到了hibernate的配置文件中 1&lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/hibernate_day01?useUnicode=true&amp;amp;characterEncoding=UTF8&lt;/property&gt; 这里我在数据库名称 hibernate_day01后面加入了 ?useUnicode=true&amp;characterEncoding=UTF8 这个是编码格式，实测如果不加的话在数据库中出现中文会识别不了，hhibernate_day01为数据库的名称，这个数据库要提前建好哦，表就不用了。 ps：mysql数据库中有个坑爹的地方，字符集有utf8和utf8mb4，记住！！！永远不要在MySQL中使用utf8，要用utf8mb4，至于为什么，各位可以网上进一步了解，我是吃了大亏！！！！！ 编写测试代码好了，配置文件都搞完了，我们现在要开始测试一下我们弄的成果。先上代码: 12345678910111213141516171819202122232425262728293031public class HibernateDemo1 &#123; public static void demo01 () &#123; //加载配置文件 Configuration cfg = new Configuration().configure(); //创建一个SeeeionFactory SessionFactory sessionFactory =cfg.buildSessionFactory(); //创建session对象，类似于jdbc的Connection Session session = sessionFactory.openSession(); //开启事务 Transaction tx = session.beginTransaction(); //执行相关操作 Customer customer = new Customer(); customer.setCust_name(&quot;小溪&quot;); customer.setCust_source(&quot;网络推广&quot;); session.save(customer); //提交事务 tx.commit(); //释放资源 session.close(); &#125; public static void main(final String[] args) &#123; demo01(); System.out.println(&quot;success&quot;); &#125;&#125; 通过代码我们可以分析： Configuration主要是用于加载、启动映射文件，反正就是和映射文件有关啦，通过 Configuration cfg = new Configuration().configure(); 来创建实例，configure()这个方法是使用默认的hibernate.cfg.xml配置文件，如果不是默认的文件，就要指定文件的位置，方法是configure(“路径/配置文件.xml”)，不过我觉得一般很少用到这个方法 SessionFactory 工厂对象，这个接口可以看得出来是初始化和建立 session对象，session在hibernate中起到一个缓冲作用，hibernate将自动生成的东东放到这个缓冲区中，就是缓存嘛~它的同一个实例可以提供多个线程共享，所以只需要建立一个就行了，节约资源~~~ Session就是类与数据库交互的一个对象啦，crud操作就是用它来完成，创建完SessionFactory实例以后就可以获取session实例了，这里获取session实例有两种方式，一种是openSession（）方法，一种是getCurrentSession（）方法， 第一种方法：1Session session = sessionFactory.openSession(); 第二种方法1Session session = sessionFactory.getCurrentSession(); 这两种方法，简单来说，就是使用第一种的时候要在最后手动使用close方法关闭，而第二种不用，他会自动关闭。 方法总结： Transaction 接口主要用于管理事务，它由Session对象开启，在Transaction接口中，提供了常用方法，比如commit ()方法，它用于提交session实例，这个很重要，执行完数据操作以后，要用这个方法来进行提交，才能真正的将内容同步到数据库中，roolback()是回滚操作，在出现异常错误时，要用此方法回滚，这里我没有用到这个方法。 Customer类就是获取对象啦，对对象中的属性进行操作从而实现对数据库中的操作，然后用session.save（）方法进行保存 好了我们运行来看一下： 运行成功，可以看到数据已经添加到数据库的表中。 总结以上就是我第一天学习Hibernate的心得，第一天学习嘛，肯定还有很多地方的理解的不行，再接下来的学习中慢慢努力咯~","categories":[{"name":"Hibernate","slug":"Hibernate","permalink":"https://nibiru123.github.io/categories/Hibernate/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nibiru123.github.io/tags/学习笔记/"},{"name":"Java框架","slug":"Java框架","permalink":"https://nibiru123.github.io/tags/Java框架/"},{"name":"SSH","slug":"SSH","permalink":"https://nibiru123.github.io/tags/SSH/"}]},{"title":"在Mac下使用hexo框架+GitHub搭建免费个人博客","date":"2019-03-23T12:36:20.000Z","path":"2019/03/23/first/","text":"前期准备：1.注册一个GitHub账号 2.安装node.js, npm，git客户端 安装过程：1.打开终端，使用命令sudo su切换到root用户，利用node -v，npm-v观察是否安装成功 2.安装淘宝镜像源(这样速度会快一点- -)： 1npm install -g cnpm -registry=https://registry.npm.taobao.org 3.cnpm -v命令验证是否安装成功 4.安装hexo框架：1cnpm install -g hexo-cli 5.hexo -v验证是否安装成功 6.在任意一个位置新建一个文件夹作为博客的目录 7.在终端下使用cd进入此文件夹，初始化博客，安装完成后会提示：Start blogging with Hexo！ 12cd 文件夹名称sudo hexo init 8.利用hexo s命令来启动，利用网址localhost:4000来访问本地博客 将本地博客部署到github上1.登录到自己的GitHub，新建一个仓库，命名规则如图所示： 2.利用终端进入到博客文件夹，安装Git部署插件 12cd 博客文件夹cnpm install --save hexo-deployer-git 3.设置博客文件夹下的_config.yml文件，使用vim打开，配置格式如下： type为git，repo为你仓库地址，branch可以设置为master，保存退出 4.使用hexo d命令部署到github上 5.等待完成，使用仓库地址来访问，你会发现已经设置成功。","categories":[{"name":"教程","slug":"教程","permalink":"https://nibiru123.github.io/categories/教程/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://nibiru123.github.io/tags/hexo/"},{"name":"博客安装","slug":"博客安装","permalink":"https://nibiru123.github.io/tags/博客安装/"}]}]