<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xi&#39;s Blog</title>
  
  <subtitle>啥都不懂，啥都不会~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nibiru123.github.io/"/>
  <updated>2019-04-27T13:19:51.537Z</updated>
  <id>https://nibiru123.github.io/</id>
  
  <author>
    <name>nibiru</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo相关配置</title>
    <link href="https://nibiru123.github.io/2019/04/27/hexo1/"/>
    <id>https://nibiru123.github.io/2019/04/27/hexo1/</id>
    <published>2019-04-27T12:58:20.000Z</published>
    <updated>2019-04-27T13:19:51.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h1><p>hexo的评论系统有很多，但目前来说最好用的其实就属 Valine 了，我目前就是用的这个，配置也比较简单</p><h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><h3 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h3><p>我们的评论系统是放在 leancloud 上的，因此首先要注册一个账号:<br><a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">点我注册Leancloud</a></p><p>注册完以后需要创建一个应用，名字随便起，然后 进入应用-&gt;设置-&gt;应用key,获取你的appid和appkey，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/hexo1/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br><br>然后在主题的配置文件中，填入你的appid和appkey,下面是我的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true # 如果你想使用valine，请将值设置为 true</span><br><span class="line">  appId:   # your leancloud appId</span><br><span class="line">  appKey:     # your leancloud appKey</span><br><span class="line">  notify: false # Mail notify</span><br><span class="line">  verify: false # Verify code</span><br><span class="line">  avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder:  # Comment Box placeholder</span><br><span class="line">  guest_info: nick,mail,link # Comment header info</span><br><span class="line">  pageSize: 10 # comment list page size</span><br></pre></td></tr></table></figure></p><h1 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h1><h2 id="Json-content"><a href="#Json-content" class="headerlink" title="Json-content"></a>Json-content</h2><p>用于生成静态站点数据，用作站内搜索的数据源。这样你博客的搜索功能就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure></p><h1 id="开启标签页"><a href="#开启标签页" class="headerlink" title="开启标签页"></a>开启标签页</h1><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></p><p>修改 hexo/source/tags/index.md 的元数据,参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-04-27 19:12:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="开启分类页"><a href="#开启分类页" class="headerlink" title="开启分类页"></a>开启分类页</h1><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></p><p>同样 修改 hexo/source/categories/index.md 的元数据，参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-27 19:09:13</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后在所写的文章头部加上 categories tags 标签，参考如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: title123</span><br><span class="line">date: 2019-03-23 </span><br><span class="line">categories: </span><br><span class="line">- c1</span><br><span class="line">- c2</span><br><span class="line">tags:</span><br><span class="line">- t1</span><br><span class="line">- t2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;评论系统&quot;&gt;&lt;a href=&quot;#评论系统&quot; class=&quot;headerlink&quot; title=&quot;评论系统&quot;&gt;&lt;/a&gt;评论系统&lt;/h1&gt;&lt;p&gt;hexo的评论系统有很多，但目前来说最好用的其实就属 Valine 了，我目前就是用的这个，配置也比较简单&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="教程" scheme="https://nibiru123.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://nibiru123.github.io/tags/hexo/"/>
    
      <category term="博客配置" scheme="https://nibiru123.github.io/tags/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记（2）</title>
    <link href="https://nibiru123.github.io/2019/04/27/study02/"/>
    <id>https://nibiru123.github.io/2019/04/27/study02/</id>
    <published>2019-04-27T07:28:20.000Z</published>
    <updated>2019-04-27T13:20:26.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>坚持就是胜利，今天来写一下Hibernate中实体类的编写原则，主键生成策略，增删改查的一些操作还有Hibernate缓存，还有一些乱七八糟的东西</p><h2 id="实体类编写原则"><a href="#实体类编写原则" class="headerlink" title="实体类编写原则"></a>实体类编写原则</h2><p>1.实体类里面的属性必须为私有的</p><p>2.私有属性要使用public公开的set和get方法</p><p>3.实体属性建议使用基本属性类型对应的包装类</p><p>包装类： 两个特殊的：int-Integer   char-Character<br>其他的都是首字母大写，如：double-Double</p><p>至于为什么使用包装类，包装类是为了避免产生歧义，double=0 和 Double=null 的意义是不一样的，比如你的考试成绩，int =0为表示零分，你没去考试不也是零分吗？但这里我们用 Integer=null来表示。这样就不会产生歧义</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>主键生成策略常用的有 native和uuid。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot;&gt;</span><br><span class="line">           &lt;generator class=&quot;native&quot;/&gt;</span><br><span class="line">           &lt;generator class=&quot;uuid&quot;/&gt;    </span><br><span class="line">       &lt;/id&gt;</span><br></pre></td></tr></table></figure></p><p>二者有什么区别呢？先来看图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure> <p><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>native：为id自动生成策略，生成的是数字id，在实体类id的属性必须为int类型<br><br>uuid：生成的为16进制的uuid主键，添加到数据库中不需要设置id的值，在实体类中id的属性必须为字符串string类型</p><p>PS：我在测试uuid的时候遇到输入中文就报错的情况，原因是在数据库的表中设置的编码格式不正确，所以如果你其他没有错误，但是就是运行不了，那一定要检查一下你表中字段的编码格式，设置成utf8mb4基本就解决了</p><h2 id="对实体类的操作"><a href="#对实体类的操作" class="headerlink" title="对实体类的操作"></a>对实体类的操作</h2><h3 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h3><p>调用session里面的sava方法来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Customer customer=new Customer();</span><br><span class="line">customer.setCust_name(&quot;小溪&quot;);</span><br><span class="line">customer.setCust_source(&quot;网络&quot;);</span><br><span class="line">customer.setCust_level(&quot;vip&quot;);</span><br><span class="line">session.save(customer);</span><br></pre></td></tr></table></figure></p><p>我们来看控制台输出的语句：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>save方法实现了sql中insert语句</p><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>调用session里面的get方法来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class,1);</span><br></pre></td></tr></table></figure><p>ger这里需要两个参数，第一个：实体类.class 第二个：id的值<br><br>控制台输出<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/5.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>get方法实现了select查询语句</p><p>ps：这里我又遇到了一个坑，之前实体类定义id的时候使用了Long类型，这就导致在查询id的时候出现格式不匹配的错误，最后我把Long改成了int就解决了。</p><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p>先查询再修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class,1);</span><br><span class="line">        customer.setCust_name(&quot;大溪&quot;);</span><br><span class="line">        session.update(customer);</span><br></pre></td></tr></table></figure><p><br><br>我们来看控制台输出语句：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/6.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>在这里，通过session.get方法来获取到了id的值，然后调用实体类中的set方法来对值进行修改，最后调用session的update的方法来实现对数据库表中内容的修改<br><br><br>执行过程：到Customer对象里面找到cust_id的值，根据id的值进行修改</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>先查询再删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class,1);</span><br><span class="line">session.delete(customer);</span><br></pre></td></tr></table></figure><p>这里执行方法和上面的修改操作方法类似<br>我们看控制台输出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/7.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="Hibernate的持久化对象的三种状态"><a href="#Hibernate的持久化对象的三种状态" class="headerlink" title="Hibernate的持久化对象的三种状态"></a>Hibernate的持久化对象的三种状态</h2><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><p>瞬时态由new命令创建，开辟内存空间的对象，没有持久化表示OID（可以理解为主键），未与Session对象关联，可以表现为以下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Customer customer=new Customer();</span><br><span class="line">        customer.setCust_name(&quot;小溪&quot;);</span><br><span class="line">        customer.setCust_source(&quot;网络&quot;);</span><br><span class="line">        customer.setCust_level(&quot;vip&quot;);</span><br></pre></td></tr></table></figure><h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><p>持久态有了OID，加入到了Session的缓存中，并且关联的session没有关闭，在数据库中有对应的记录，持久态对象是在事务没有提交之前变成持久态的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class,1);</span><br></pre></td></tr></table></figure></p><h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><p>同样存在OID，可以理解为离线了，当持久态与session的关联被关闭了就成为了脱管态，但是仍然与数据库的数据存在关联，只是失去了与当前Session的关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Customer customer=new Customer();</span><br><span class="line">         customer.setCust_id(&quot;2&quot;);</span><br></pre></td></tr></table></figure><h3 id="对saveorUpdate方法的理解"><a href="#对saveorUpdate方法的理解" class="headerlink" title="对saveorUpdate方法的理解"></a>对saveorUpdate方法的理解</h3><p>在session的众多方法中，存在一个saveorUpdate方法，从字面意思来看，这是两个方法，添加或者修改，那么什么时候是修改呢，什么时候是添加呢？这和上面三种状态有啥关系呢？<br><br>瞬时态下调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Customer customer=new Customer();</span><br><span class="line">        customer.setCust_name(&quot;小溪&quot;);</span><br><span class="line">        customer.setCust_source(&quot;网络&quot;);</span><br><span class="line">        customer.setCust_level(&quot;vip&quot;);</span><br><span class="line">        session.saveOrUpdate(customer);</span><br></pre></td></tr></table></figure></p><p>控制台输出<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>很明显，这里调用了添加操作，我们可以总结，实体类对象的状态是瞬时态时，做添加<br><br>持久态下调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class,2);</span><br><span class="line">        customer.setCust_name(&quot;大溪&quot;);</span><br><span class="line">        session.saveOrUpdate(customer);</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/9.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这里调用了修改操作。so，实体类对象的状态是持久态时，做修改<br><br>脱管态下调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ustomer customer=new Customer();</span><br><span class="line">        customer.setCust_id(3);</span><br><span class="line">        customer.setCust_name(&quot;小小溪&quot;);</span><br><span class="line">        customer.setCust_source(&quot;网络&quot;);</span><br><span class="line">        customer.setCust_level(&quot;vip&quot;);</span><br><span class="line">        session.saveOrUpdate(customer);</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/10.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><br><br>我们可以看到，这里调用了修改方法，所以实体类对象是托管态时，做修改</p><h2 id="Hibernate的缓存"><a href="#Hibernate的缓存" class="headerlink" title="Hibernate的缓存"></a>Hibernate的缓存</h2><p>什么是缓存呢？<br>缓存就是把数据放到内存中，不用流的方式，直接在内存中读取数据，把数据放到了内存中，提高了读取效率。<br><br><br>Hibernate缓存<br>Hibernate有一级二级缓存，二级缓存目前已经被redis来代替了，这里不再讨论，Hibernate的缓存减少了访问数据库的次数</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存默认是打开的，它的使用范围实际上是session的使用范围，从session的创建到session关闭，一级缓存中存储的是持久态数据</p><h3 id="一级缓存的验证"><a href="#一级缓存的验证" class="headerlink" title="一级缓存的验证"></a>一级缓存的验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Customer customer1 = session.get(Customer.class,3);</span><br><span class="line">System.out.println(customer1);</span><br><span class="line">Customer customer2 = session.get(Customer.class,3);</span><br><span class="line">System.out.println(customer2);</span><br></pre></td></tr></table></figure><p>在这里我们创建两个对象，根据id来查询，看是否会返回sql语句，现在我们来看控制台输出<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/11.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>可以看到，第一步执行完以后，发送sql语句查询，第二步则没有执行sql语句，直接访问了一级缓存的内容</p><h3 id="一级缓存的执行过程"><a href="#一级缓存的执行过程" class="headerlink" title="一级缓存的执行过程"></a>一级缓存的执行过程</h3><p>首先查询一级缓存，发现一级缓存没有数据，才会去查询数据库的内容，随后返回一个持久化对象（customer1）<br><br>其次把customer1放到一级缓存中<br><br>customer2开始运行，和cus1一样，先查询一级缓存，发现一级缓存有数据，则查询一级缓存中的数据，不再执行sql语句了</p><h3 id="一级缓存的作用"><a href="#一级缓存的作用" class="headerlink" title="一级缓存的作用"></a>一级缓存的作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Customer customer1 = session.get(Customer.class,3);</span><br><span class="line">        System.out.println(customer1);</span><br><span class="line">        customer1.setCust_name(&quot;大小溪&quot;);</span><br><span class="line">        //提交事务</span><br><span class="line">        tx.commit();</span><br><span class="line">        //释放资源</span><br><span class="line">        session.close();</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/12.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>我们可以看到，这里实现了更新数据库的操作。</p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>首先执行session的get操作，返回customer的持久态对象，放到了一级缓存中，同时在一级缓存中有个快照区，快照区保存的内容与一级缓存中的内容一致，调用set方法来修改值，也就是customer持久态对象在一级缓存中的值，修改一级缓存但不会修改快照区的内容，最后提交事务的时候，commit来比较，一级缓存中的值和快照中的值是否相同，如果相同不进行修改，如果不同，就修改咯，然后把一级缓存中的值放到数据库中。</p><h2 id="Hibernate事务"><a href="#Hibernate事务" class="headerlink" title="Hibernate事务"></a>Hibernate事务</h2><p>什么是事务？<br>简单理解为就是同一组操作，要么一起成功，要么一起失败，只要其中一项操作出现了错误，就不能成功，这就和代码运行一样，其中一行代码出现了错误，其他后面就编译不通过，无法运行。<br><br>事务的四个特性（ACID）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/13.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>在昨天的笔记中，我有提到一个回滚方法，rollback，这个操作就是当事务出现异常时，对事务进行回滚撤销。</p><h3 id="Hibernate事务代码的规范写法"><a href="#Hibernate事务代码的规范写法" class="headerlink" title="Hibernate事务代码的规范写法"></a>Hibernate事务代码的规范写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    开启事务</span><br><span class="line">    提交事务</span><br><span class="line">&#125;catch&#123;</span><br><span class="line">    回滚事务</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码事例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void demo01() &#123;</span><br><span class="line">    Configuration cfg = new Configuration().configure();</span><br><span class="line">    SessionFactory sessionFactory = null;</span><br><span class="line">    Session session = null;</span><br><span class="line">    Transaction tx = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">        session = sessionFactory.openSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        Customer customer = new Customer();</span><br><span class="line">        customer.setCust_name(&quot;小溪&quot;);</span><br><span class="line">        customer.setCust_source(&quot;网络&quot;);</span><br><span class="line">        session.save(customer);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Hibernate其他API"><a href="#Hibernate其他API" class="headerlink" title="Hibernate其他API"></a>Hibernate其他API</h2><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>使用Query不需要编学sql语句，需要写hql语句，sql的语句是操作数据库的表和字段，hql语句是操作实体类和属性，查询所有的hql语句为 from+实体类名称，代码演示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建Query对象，方法里面写hql语句</span><br><span class="line">        Query query=session.createQuery(&quot;from Customer &quot;);</span><br><span class="line">        //调用query里的方法来得到结果，然后用for循环输出</span><br><span class="line">        List&lt;Customer&gt; list=query.list();</span><br><span class="line">        for (Customer customer:list)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><p>使用这个对象查询操作，不需要写语句，直接调用方法实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria=session.createCriteria(Customer.class);</span><br><span class="line">        List&lt;Customer&gt; list=criteria.list();</span><br><span class="line">        for (Customer customer:list)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="SQLQuery"><a href="#SQLQuery" class="headerlink" title="SQLQuery"></a>SQLQuery</h3><p>调用底层的sql实现，需要写sql语句,不建议使用，太麻烦了orz。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/27/study02/14.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第二次的学习完成，最大的感受就是有了框架来操作数据库是真的容易！继续努力！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;坚持就是胜利，今天来写一下Hibernate中实体类的编写原则，主键生成策略，增删改查的一些操作还有Hibernate缓存，还有一些乱七八糟
      
    
    </summary>
    
      <category term="Hibernate" scheme="https://nibiru123.github.io/categories/Hibernate/"/>
    
    
      <category term="学习笔记" scheme="https://nibiru123.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java框架" scheme="https://nibiru123.github.io/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SSH" scheme="https://nibiru123.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记（1）</title>
    <link href="https://nibiru123.github.io/2019/04/26/study1/"/>
    <id>https://nibiru123.github.io/2019/04/26/study1/</id>
    <published>2019-04-26T12:30:20.000Z</published>
    <updated>2019-04-27T13:20:31.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>说实话，建这博客的目的就是为了记录自己的学习和生活，然并卵。。。。我好像忘了它的存在，一直在我github上挂着，下午抽出来时间搞了一下博客中的评价系统，我也不知道到底能不能用- -，而且其他一些功能我还没有研究透，慢慢来咯~</p><p>最近在学习SSH框架，其中Struts2已经学完了，但是学的不怎么样，估计还要再重新学一遍- -。等把hibernate搞完在写Struts2的学习笔记吧。（刚开始学，内容难免有不准确的地方，等到学完回头来看看再修改啦！）</p><h2 id="JAVA-EE开发的结构："><a href="#JAVA-EE开发的结构：" class="headerlink" title="JAVA EE开发的结构："></a>JAVA EE开发的结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">web层，业务层，持久层是EE开发中经典的三层结构</span><br><span class="line">web层：servlet+jsp，Struts1，2，Spring mvc</span><br><span class="line">业务层：Javabean，spring</span><br><span class="line">持久层：JDBC，hibernate，mybatis</span><br></pre></td></tr></table></figure><h2 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h2><p>Hibernate处于ee开发结构的持久层（DAO层），他使用ORM思想对数据库进行crud（增删改查）操作。<br>那么什么是ORM呢？</p><p>orm就是对象关系映射，什么是对象关系映射呢？我个人的理解就是让实体类，也就是Javabean中的内容，与数据库中的内容进行一一对应，让实体类与数据库中的表对应，实体类里面的内容与数据库中的内容对应，这样，我们在操作数据库中内容的时候，就不用直接操作数据库中的表了，直接操作实体类中的对象、<br>而这对应的过程是使用配置文件来完成的。</p><h2 id="Hibernate环境搭建过程"><a href="#Hibernate环境搭建过程" class="headerlink" title="Hibernate环境搭建过程"></a>Hibernate环境搭建过程</h2><p>我是用Intellij IDE来学习Hibernate的，其实老师上课一直在用myeclipise，各种导包，导入约束，我觉得这种过程只需要做一次自己知道的大概就行了，不用每次都在这地方浪费时间，intellij ide的好处就是可以自动导包，比myeclipise简化多了，时间也节省了- -这里我就不多说了</p><p>没有对比就没有伤害，如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="Hibernate优势"><a href="#Hibernate优势" class="headerlink" title="Hibernate优势"></a>Hibernate优势</h2><p>1.Hibernate对jdbc访问数据库的代码进行了封装，终于可以不用写繁琐的重复性的sql代码了- -<br>2.不知道了</p><h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><p>开头已经说了，我们首先要有一个实体类（JavaBean）<br>这里我没有在数据库中先创建表，因为Hibernate框架会根据后面的配置文件自动在数据库中创建表</p><h3 id="1-先来看实体类："><a href="#1-先来看实体类：" class="headerlink" title="1.先来看实体类："></a>1.先来看实体类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">//实体类，要与数据库表中名称一一对应</span><br><span class="line">/*这些属性通过getter和setter方法来访问，对外部隐藏了内部是实现细节*/</span><br><span class="line">public class Customer &#123;</span><br><span class="line">    private Long   cust_id;</span><br><span class="line">    private String cust_name;</span><br><span class="line">    private String cust_source;</span><br><span class="line">    private String cust_industry;</span><br><span class="line">    private String cust_level;</span><br><span class="line">    private String cust_phone;</span><br><span class="line">    private String cust_mobile;</span><br><span class="line"></span><br><span class="line">    public Long getCust_id() &#123;</span><br><span class="line">        return cust_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_id(Long cust_id) &#123;</span><br><span class="line">        this.cust_id = cust_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_name() &#123;</span><br><span class="line">        return cust_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_name(String cust_name) &#123;</span><br><span class="line">        this.cust_name = cust_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_source() &#123;</span><br><span class="line">        return cust_source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_source(String cust_source) &#123;</span><br><span class="line">        this.cust_source = cust_source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_industry() &#123;</span><br><span class="line">        return cust_industry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_industry(String cust_industry) &#123;</span><br><span class="line">        this.cust_industry = cust_industry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_level() &#123;</span><br><span class="line">        return cust_level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_level(String cust_level) &#123;</span><br><span class="line">        this.cust_level = cust_level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_phone() &#123;</span><br><span class="line">        return cust_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_phone(String cust_phone) &#123;</span><br><span class="line">        this.cust_phone = cust_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCust_mobile() &#123;</span><br><span class="line">        return cust_mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCust_mobile(String cust_mobile) &#123;</span><br><span class="line">        this.cust_mobile = cust_mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实体类创建完毕，接下来我们要创建配置文件，让它与数据库中的表进行对应"><a href="#2-实体类创建完毕，接下来我们要创建配置文件，让它与数据库中的表进行对应" class="headerlink" title="2.实体类创建完毕，接下来我们要创建配置文件，让它与数据库中的表进行对应"></a>2.实体类创建完毕，接下来我们要创建配置文件，让它与数据库中的表进行对应</h3><p>在实体类所在的包中，创建一个名称为 实体类名称+hbm.xml的映射文件，在这个映射文件中，定义了实体类中的属性是如何映射到数据库中的表的，在这里我的映射文件名称为：Custome+hbm.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">    &lt;class name=&quot;cn.lcx.domain.Customer&quot; table=&quot;cst_customer&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;/&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>我来对上面的表进行一些说明：</p><p>class标签是用来建立实体类和数据库表中的映射的</p><p>name：实体类的路径，这个不用多解释，你总要告诉是哪个实体类吧，注意名称必须是全路径</p><p>table：看名字就知道是数据库的表了，也就是实体类所对应的那个表，这里表的名称为cst_customer，数据库还没有指定，在后面的会说到</p><p>catalog：这个属性就是指定数据库了，可以省略，这里我没有写，因为后面的配置文件会指定-</p><p>id标签是用来指定类中的属性和表中的主键相对应，说白了就是建立主键的，什么是主键- -这个我就不多说了，主键是唯一的。</p><p>name:这个是指类中的属性名</p><p>column：这个是指表中的名，如果实体类中的名字和表中的名字相同可以省略，不过我没测试，我觉得还是不要省略吧，便与检查</p><p>length：字段的长度啦，除非有特殊的，这个默认就好</p><p>type：类型啦，对应sql的类型，没什么多说点</p><p>&lt; generator class=“native”/&gt; 这个是主键生成策略，native为自动增长，就是123456这样增长下去，后面肯定还有不同的增长策略，我还没有学习到- -。等再补充</p><p>property标签，就是建立类中的普通属性与数据库表中的标签相对应，这个很好理解</p><h3 id="Hibernate核心配置文件"><a href="#Hibernate核心配置文件" class="headerlink" title="Hibernate核心配置文件"></a>Hibernate核心配置文件</h3><p>以上的内容是实体类与数据库中的表来建立映射关系，我上面有说，我们还没有指定是哪个数据库，这里就是来配置数据库连接的，首先来看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Configuration DTD//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">       &lt;!--连接数据库的基本参数--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/hibernate_day01?useUnicode=true&amp;amp;characterEncoding=UTF8&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">         &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</span><br><span class="line">         &lt;property name=&quot;hibernate.connection.password&quot;&gt;abc3770166&lt;/property&gt;</span><br><span class="line">        &lt;!--hibernate属性--&gt;</span><br><span class="line">        &lt;!-- DB schema will be updated if needed --&gt;</span><br><span class="line">        &lt;!--根据配置生成sql语句--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;</span><br><span class="line">        &lt;!--在控制台显示sql语句--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">        &lt;!--格式化sql语句--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">        &lt;!--hbm2ddl属性说明--&gt;</span><br><span class="line">        &lt;!--hbm2ddl.auto的取值--&gt;</span><br><span class="line">        &lt;!--none 不自动生成表--&gt;</span><br><span class="line">        &lt;!--create 每次都会创建一个新的表--&gt;</span><br><span class="line">        &lt;!--create-drop每次都会创建一新的表，然后程序结束后删除这个表--&gt;</span><br><span class="line">        &lt;!--update 如果数据库中有这个表，则使用，没有，则创建一个表--&gt;</span><br><span class="line">        &lt;!--validate 只会使用原有的表，可以用来检测映射关系--&gt;</span><br><span class="line">        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</span><br><span class="line">        &lt;!--加载映射关系--&gt;</span><br><span class="line">        &lt;mapping resource=&quot;cn/lcx/domain/Customer.hbm.xml&quot;&gt;&lt;/mapping&gt;</span><br><span class="line">    &lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure></p><p>在src下创建一个名称为hibernate.cfg.xml的文件，这里我就不用创建啦，因为智能的intellij ide已经帮我创建好啦，eclipse下要手动创建的，所以强烈安利使用 intellij ide，可以节省不少时间呢！</p><p>上面这个配置文件设置了数据库的相关属性和其他一些常用的数据，通过mapping的resource属性将对象的关系加入到了hibernate的配置文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/hibernate_day01?useUnicode=true&amp;amp;characterEncoding=UTF8&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>这里我在数据库名称 hibernate_day01后面加入了 ?useUnicode=true&amp;characterEncoding=UTF8  这个是编码格式，实测如果不加的话在数据库中出现中文会识别不了，hhibernate_day01为数据库的名称，这个数据库要提前建好哦，表就不用了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>ps：mysql数据库中有个坑爹的地方，字符集有utf8和utf8mb4，记住！！！永远不要在MySQL中使用utf8，要用utf8mb4，至于为什么，各位可以网上进一步了解，我是吃了大亏！！！！！</p><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p>好了，配置文件都搞完了，我们现在要开始测试一下我们弄的成果。先上代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class HibernateDemo1 &#123;</span><br><span class="line"></span><br><span class="line">    public static void demo01 ()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">            //加载配置文件</span><br><span class="line">            Configuration cfg = new Configuration().configure();</span><br><span class="line">            //创建一个SeeeionFactory</span><br><span class="line">            SessionFactory sessionFactory =cfg.buildSessionFactory();</span><br><span class="line">            //创建session对象，类似于jdbc的Connection</span><br><span class="line">            Session session = sessionFactory.openSession();</span><br><span class="line">            //开启事务</span><br><span class="line">            Transaction tx = session.beginTransaction();</span><br><span class="line">            //执行相关操作</span><br><span class="line">            Customer customer = new Customer();</span><br><span class="line">            customer.setCust_name(&quot;小溪&quot;);</span><br><span class="line">            customer.setCust_source(&quot;网络推广&quot;);</span><br><span class="line">            session.save(customer);</span><br><span class="line"></span><br><span class="line">            //提交事务</span><br><span class="line">            tx.commit();</span><br><span class="line">            //释放资源</span><br><span class="line">            session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(final String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        demo01();</span><br><span class="line">        System.out.println(&quot;success&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码我们可以分析：</p><p>Configuration主要是用于加载、启动映射文件，反正就是和映射文件有关啦，通过 Configuration cfg = new Configuration().configure(); 来创建实例，configure()这个方法是使用默认的hibernate.cfg.xml配置文件，如果不是默认的文件，就要指定文件的位置，方法是configure(“路径/配置文件.xml”)，不过我觉得一般很少用到这个方法</p><p>SessionFactory 工厂对象，这个接口可以看得出来是初始化和建立 session对象，session在hibernate中起到一个缓冲作用，hibernate将自动生成的东东放到这个缓冲区中，就是缓存嘛~它的同一个实例可以提供多个线程共享，所以只需要建立一个就行了，节约资源~~~</p><p>Session就是类与数据库交互的一个对象啦，crud操作就是用它来完成，创建完SessionFactory实例以后就可以获取session实例了，这里获取session实例有两种方式，一种是openSession（）方法，一种是getCurrentSession（）方法，</p><p>第一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = sessionFactory.openSession();</span><br></pre></td></tr></table></figure></p><p>第二种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = sessionFactory.getCurrentSession();</span><br></pre></td></tr></table></figure></p><p>这两种方法，简单来说，就是使用第一种的时候要在最后手动使用close方法关闭，而第二种不用，他会自动关闭。</p><p>方法总结：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>Transaction 接口主要用于管理事务，它由Session对象开启，在Transaction接口中，提供了常用方法，比如commit ()方法，它用于提交session实例，这个很重要，执行完数据操作以后，要用这个方法来进行提交，才能真正的将内容同步到数据库中，roolback()是回滚操作，在出现异常错误时，要用此方法回滚，这里我没有用到这个方法。</p><p>Customer类就是获取对象啦，对对象中的属性进行操作从而实现对数据库中的操作，然后用session.save（）方法进行保存</p><p>好了我们运行来看一下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/5.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/study1/6.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>运行成功，可以看到数据已经添加到数据库的表中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我第一天学习Hibernate的心得，第一天学习嘛，肯定还有很多地方的理解的不行，再接下来的学习中慢慢努力咯~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;说实话，建这博客的目的就是为了记录自己的学习和生活，然并卵。。。。我好像忘了它的存在，一直在我github上挂着，下午抽出来时间搞了
      
    
    </summary>
    
      <category term="Hibernate" scheme="https://nibiru123.github.io/categories/Hibernate/"/>
    
    
      <category term="学习笔记" scheme="https://nibiru123.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java框架" scheme="https://nibiru123.github.io/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SSH" scheme="https://nibiru123.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>在Mac下使用hexo框架+GitHub搭建免费个人博客</title>
    <link href="https://nibiru123.github.io/2019/03/23/first/"/>
    <id>https://nibiru123.github.io/2019/03/23/first/</id>
    <published>2019-03-23T12:36:20.000Z</published>
    <updated>2019-04-27T13:19:49.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h2><p>1.注册一个GitHub账号</p><p>2.安装node.js,  npm，git客户端</p><h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><p>1.打开终端，使用命令sudo su切换到root用户，利用node -v，npm-v观察是否安装成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/first/WX20190323-194705@2x.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>2.安装淘宝镜像源(这样速度会快一点- -)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm -registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>3.cnpm -v命令验证是否安装成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/first/WX20190323-195252@2x.png" alt title>                </div>                <div class="image-caption"></div>            </figure>4.安装hexo框架：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>5.hexo -v验证是否安装成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/first/WX20190323-195443@2x.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>6.在任意一个位置新建一个文件夹作为博客的目录</p><p>7.在终端下使用cd进入此文件夹，初始化博客，安装完成后会提示：Start blogging with Hexo！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 文件夹名称</span><br><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p>8.利用hexo s命令来启动，利用网址localhost:4000来访问本地博客</p><h2 id="将本地博客部署到github上"><a href="#将本地博客部署到github上" class="headerlink" title="将本地博客部署到github上"></a>将本地博客部署到github上</h2><p>1.登录到自己的GitHub，新建一个仓库，命名规则如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/first/WX20190323-200114.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>2.利用终端进入到博客文件夹，安装Git部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 博客文件夹</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>3.设置博客文件夹下的_config.yml文件，使用vim打开，配置格式如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/first/WX20190323-200513@2x.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>type为git，repo为你仓库地址，branch可以设置为master，保存退出</p><p>4.使用hexo d命令部署到github上</p><p>5.等待完成，使用仓库地址来访问，你会发现已经设置成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备：&quot;&gt;&lt;a href=&quot;#前期准备：&quot; class=&quot;headerlink&quot; title=&quot;前期准备：&quot;&gt;&lt;/a&gt;前期准备：&lt;/h2&gt;&lt;p&gt;1.注册一个GitHub账号&lt;/p&gt;
&lt;p&gt;2.安装node.js,  npm，git客户端&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="教程" scheme="https://nibiru123.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="博客安装" scheme="https://nibiru123.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"/>
    
      <category term="hexo" scheme="https://nibiru123.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
